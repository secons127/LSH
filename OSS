ccdf

OSS-GIT

깃개요
- 깃 내부 저장소 상태
• 작업 디렉토리 ( working directory , working folder)
• 작업공간 (work space) , 작업트리 (working tree)
- Modified , untracked
• 스테이징 영역 (staging area , stage area , index )
- Staged , indexed
• 깃 저장소 ( git repository , repository , .git directory )
- Committed
• 임시 저장소 ( stash ) 
- Stash

깃에서 상태 간의 이동명령
• Add 작업 디렉토리 > 스테이징 영역 이동
• Commit 스테이징 영역 > 깃 저장소

Git 명령어 기초
Git 명령어
• 버전 확인 > $ git —version
• 설정 확인 > $ git config —list
• 도움 > $ git —help

깃 설정
• $ git init basic 저장소 생성
• $ cd basic 폴더 이동
• $ is -al 파일 확인

리눅스 명령
• $ pwd 현재 폴더 표시
• $ cd 디렉토리 변경
• $ mkdir dname 디렉토리 만들기
• $ ls 파일 혹은 폴더 리스트
• $ touch fname 빈 파일 fname 생성
• $ cat fname 파일 내용 보이기
• $ cp a b 파일 a를 b로 복사
• $ mv f1 f2 파일 f1을 f2로 이름 수정
• $ rm fname 파일 fname 삭제
• $ rm -rf dname 하부에 서브폴더와 파일이 있어도 폴더 삭제, 옵션사용
- -f 강제로 파일이나 디렉토리 삭제
- -r 디렉토리 내부의 모든 내용을 삭제
• ls 현재 위치의 파일 목록 조회
• Cat 파일의 내용을 화면에 출력
• ‘>’ 기존에 있는 파일 내용을 지우고 저장
• ‘>>’ 기존 파일 내용 뒤에 덧붙여서 저장
• ‘<‘ 파일의 데이터를 명령에 입력

버전관리를 위한 add, commit 명령
• $ git rm —cached 커밋할 수정 내용에서 삭제 이전 내용으로 수정
Commit - 버전 관리를 위해 현재 스테이지 영역의 내용에 대해 스냅샷을 찍는 명령
• $ git commit 커밋 메세지를 입력할 기본 편집기 실행됨
• $ git commit -m ‘message’ 커밋 메세지를 직접 입력
• $ git commit -a -m ‘message’ > 추가와 커밋을 함께 실행
• $ git commit -am ‘message’ > 추가와 커밋을 함께 실행

버전 로그 이력 확인
• $ git log 로그 이력 정보를 표시
• $ git log —online 로그 이력을 한 줄로 표시
• $ git log [—patch|-p] 로그 이력과 함께 파일의 변화를 표시
• $ git show 마지막 커밋의 커밋 정보 표시
• $ git show —online 커밋 로그 한 줄과 파일 차이 표시. 밑에꺼랑 함꼐 사용 한줄로표시
• $ git show -s 파일 차이는 표시되지 않음
• $ git show [HEAD] 지정한 HEAD의 커밋 정보 표시
• $ git. show[commitID] 지정한 commitID의 커밋 정보 표시

여러 커밋과 로그 이력
• $ git init basic 저장소 생성
• $ git add , commit 깃 저장소에 저장
• $ git config —global user.name hskang 사용자이름
• $ git config —global user.email hskang@gmail.com 전자메일 설정
• $ git config —global core.autocrlf true 자동 줄바꿈
• $ git config —global core.autocrlf false 안전 줄바꿈
• $ git config —global core.editor ‘code —wait’ 기본 편집기 설정
• $ git config —global init.defaultBranch main 기본 브랜치 이름 설정
• $ git init basic 저장소 basic 설정
• $ cd basic 폴더 이동
• $ ls -al 파일 확인
• $ git log —graph 문자 그림으로 로그 이력 그리기
• $ git log —reverse 오래된 커밋부터 표시 —graph 와 함꼐 사용 x
• $ git log —all 모든 브랜치의 로그 이력 표시
• $ git log -n 최근 n개의 로그 이력 표시


과거로의 시간여행
• $ git checkout HEAD~ HEAD 이전 커밋으로 이동
• $ git checkout - 이전 커밋으로 이동
• $ git checkout [branch] 다른 브랜치로 이동
• $ git checkout main 브랜치의 마지막 커밋으로 이동
• $ git checkout -b [newBranch] 새로운 브랜치를 생성하고 이동
• $ git switch -d 이전 커밋으로 이동
• $ git switch [branch] 다른 브랜치로 이동
scc
